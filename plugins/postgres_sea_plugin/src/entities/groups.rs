//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use super::sea_orm_active_enums::AlertStatus;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "groups")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub timestamp: DateTime,
    #[sea_orm(unique)]
    pub group_key: String,
    pub receiver: String,
    pub status: AlertStatus,
    pub external_url: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::groups_common_annotations::Entity")]
    GroupsCommonAnnotations,
    #[sea_orm(has_many = "super::groups_common_labels::Entity")]
    GroupsCommonLabels,
    #[sea_orm(has_many = "super::groups_labels::Entity")]
    GroupsLabels,
}

impl Related<super::groups_common_annotations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupsCommonAnnotations.def()
    }
}

impl Related<super::groups_common_labels::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupsCommonLabels.def()
    }
}

impl Related<super::groups_labels::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupsLabels.def()
    }
}

impl Related<super::common_annotations::Entity> for Entity {
    fn to() -> RelationDef {
        super::groups_common_annotations::Relation::CommonAnnotations.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::groups_common_annotations::Relation::Groups
                .def()
                .rev(),
        )
    }
}

impl Related<super::common_labels::Entity> for Entity {
    fn to() -> RelationDef {
        super::groups_common_labels::Relation::CommonLabels.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::groups_common_labels::Relation::Groups.def().rev())
    }
}

impl Related<super::labels::Entity> for Entity {
    fn to() -> RelationDef {
        super::groups_labels::Relation::Labels.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::groups_labels::Relation::Groups.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
