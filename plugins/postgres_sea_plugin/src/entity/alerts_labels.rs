//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "alerts_labels")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub alert_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub label_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::alerts::Entity",
        from = "Column::AlertId",
        to = "super::alerts::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Alerts,
    #[sea_orm(
        belongs_to = "super::labels::Entity",
        from = "Column::LabelId",
        to = "super::labels::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Labels,
}

impl Related<super::alerts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Alerts.def()
    }
}

impl Related<super::labels::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Labels.def()
    }
}

impl Related<super::groups_labels::Entity> for Entity {
    fn to() -> RelationDef {
        super::labels::Relation::GroupsLabels.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::labels::Relation::AlertsLabels.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
