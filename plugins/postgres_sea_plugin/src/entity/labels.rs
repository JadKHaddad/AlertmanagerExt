//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "labels")]
pub struct Model {
    #[sea_orm(unique)]
    pub id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub name: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub value: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::alerts_labels::Entity")]
    AlertsLabels,
    #[sea_orm(has_many = "super::groups_labels::Entity")]
    GroupsLabels,
}

impl Related<super::alerts_labels::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AlertsLabels.def()
    }
}

impl Related<super::groups_labels::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupsLabels.def()
    }
}

impl Related<super::alerts::Entity> for Entity {
    fn to() -> RelationDef {
        super::alerts_labels::Relation::Alerts.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::alerts_labels::Relation::Labels.def().rev())
    }
}

impl Related<super::groups::Entity> for Entity {
    fn to() -> RelationDef {
        super::groups_labels::Relation::Groups.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::groups_labels::Relation::Labels.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
