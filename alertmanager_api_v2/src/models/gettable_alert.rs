/*
 * Alertmanager API
 *
 * API of the Prometheus Alertmanager (https://github.com/prometheus/alertmanager)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GettableAlert {
    #[serde(rename = "labels")]
    pub labels: ::std::collections::HashMap<String, String>,
    #[serde(rename = "generatorURL", skip_serializing_if = "Option::is_none")]
    pub generator_url: Option<String>,
    #[serde(rename = "annotations")]
    pub annotations: ::std::collections::HashMap<String, String>,
    #[serde(rename = "receivers")]
    pub receivers: Vec<crate::models::Receiver>,
    #[serde(rename = "fingerprint")]
    pub fingerprint: String,
    #[serde(rename = "startsAt")]
    pub starts_at: String,
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
    #[serde(rename = "endsAt")]
    pub ends_at: String,
    #[serde(rename = "status")]
    pub status: Box<crate::models::AlertStatus>,
}

impl GettableAlert {
    pub fn new(labels: ::std::collections::HashMap<String, String>, annotations: ::std::collections::HashMap<String, String>, receivers: Vec<crate::models::Receiver>, fingerprint: String, starts_at: String, updated_at: String, ends_at: String, status: crate::models::AlertStatus) -> GettableAlert {
        GettableAlert {
            labels,
            generator_url: None,
            annotations,
            receivers,
            fingerprint,
            starts_at,
            updated_at,
            ends_at,
            status: Box::new(status),
        }
    }
}


